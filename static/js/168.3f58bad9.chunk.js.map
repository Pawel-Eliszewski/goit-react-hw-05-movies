{"version":3,"file":"static/js/168.3f58bad9.chunk.js","mappings":"oOACA,GAAiB,E,SCKF,SAASA,IACtB,OAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAMR,OAJAE,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,kBAAsBH,EAASD,EAChC,GAAE,CAACC,KAGF,8BACGF,EAAaM,OAAS,GACrB,wBACGN,EAAaO,KAAI,SAAAC,GAChB,OACE,gBAAmBC,GAAID,EAAOC,GAAIC,UAAWC,EAAAA,KAA7C,WACE,wBACE,yBAAG,WAASH,EAAOI,aAErB,uBAAIJ,EAAOK,aAJJC,EAAAA,EAAAA,MAOZ,OAGH,uBAAG,+CAIV,C,8DChCKC,EAAW,+BACXC,EAAM,mCAENC,EAAmB,mCAAG,WAAMC,GAAN,gGAELC,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,uBAA4C,CAC7DK,OAAQ,CACNC,QAASL,KAJW,cAElBM,EAFkB,gBAQXJ,EAAkBI,EAAKC,KAAKC,SARjB,wEAUxBC,QAAQC,MAAR,MAVwB,yDAAH,sDAcnBC,EAAgB,mCAAG,WAAOC,EAAOC,GAAd,gGAEFV,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,iBAAsC,CACvDK,OAAQ,CACNC,QAASL,EACTY,MAAAA,KALiB,cAEfN,EAFe,gBASRO,EAAeP,EAAKC,KAAKC,SATjB,wEAWrBC,QAAQC,MAAR,MAXqB,yDAAH,wDAehBI,EAAiB,mCAAG,WAAO5B,EAAS6B,GAAhB,gGAEHZ,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,kBAA+Bb,GAAW,CAC3DkB,OAAQ,CACNC,QAASL,KAJS,cAEhBM,EAFgB,gBAQTS,EAAST,EAAKC,MARL,wEAUtBE,QAAQC,MAAR,MAVsB,yDAAH,wDAcjBM,EAAc,mCAAG,WAAO9B,EAAS+B,GAAhB,gGAEAd,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,kBAA+Bb,EAA/B,YAAkD,CACnEkB,OAAQ,CACNC,QAASL,KAJM,cAEbM,EAFa,gBAQNW,EAAaX,EAAKC,KAAKW,MARjB,wEAUnBT,QAAQC,MAAR,MAVmB,yDAAH,wDAcdS,EAAiB,mCAAG,WAAOjC,EAASD,GAAhB,gGAEHkB,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,kBAA+Bb,EAA/B,YAAkD,CACnEkB,OAAQ,CACNC,QAASL,KAJS,cAEhBM,EAFgB,gBAQTrB,EAAgBqB,EAAKC,KAAKC,SARjB,wEAUtBC,QAAQC,MAAR,MAVsB,yDAAH,wDAcjBrB,EAAM,CACVY,oBAAAA,EACAU,iBAAAA,EACAG,kBAAAA,EACAE,eAAAA,EACAG,kBAAAA,GAGF,K,uDCnFO,IAkBIrB,EAAS,eAACsB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAC/B,EAAIgC,GAWvD,OAREhC,IAFFgC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Reviews/Reviews.module.css","components/Reviews/Reviews.jsx","services/api.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport Api from 'services/api';\nimport css from './Reviews.module.css';\n\nexport default function Reviews() {\n  const [movieReviews, setMovieReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    Api.fetchMovieReviews(movieId, setMovieReviews);\n  }, [movieId]);\n\n  return (\n    <>\n      {movieReviews.length > 0 ? (\n        <ul>\n          {movieReviews.map(review => {\n            return (\n              <li key={nanoid()} id={review.id} className={css.item}>\n                <p>\n                  <b>Author: {review.author}</b>\n                </p>\n                <p>{review.content}</p>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p>We don`t have any reviews for this movie.</p>\n      )}\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst KEY = '839697383a813005be150e7d8de4d319';\n\nconst fetchTrendingMovies = async setTrendingMovies => {\n  try {\n    const resp = await axios.get(`${BASE_URL}/trending/movie/day`, {\n      params: {\n        api_key: KEY,\n      },\n    });\n\n    return await setTrendingMovies(resp.data.results);\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nconst fetchQueryMovies = async (query, setQueryMovies) => {\n  try {\n    const resp = await axios.get(`${BASE_URL}/search/movie`, {\n      params: {\n        api_key: KEY,\n        query,\n      },\n    });\n\n    return await setQueryMovies(resp.data.results);\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nconst fetchMovieDetails = async (movieId, setMovie) => {\n  try {\n    const resp = await axios.get(`${BASE_URL}/movie/${movieId}`, {\n      params: {\n        api_key: KEY,\n      },\n    });\n\n    return await setMovie(resp.data);\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nconst fetchMovieCast = async (movieId, setMovieCast) => {\n  try {\n    const resp = await axios.get(`${BASE_URL}/movie/${movieId}/credits`, {\n      params: {\n        api_key: KEY,\n      },\n    });\n\n    return await setMovieCast(resp.data.cast);\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nconst fetchMovieReviews = async (movieId, setMovieReviews) => {\n  try {\n    const resp = await axios.get(`${BASE_URL}/movie/${movieId}/reviews`, {\n      params: {\n        api_key: KEY,\n      },\n    });\n\n    return await setMovieReviews(resp.data.results);\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nconst Api = {\n  fetchTrendingMovies,\n  fetchQueryMovies,\n  fetchMovieDetails,\n  fetchMovieCast,\n  fetchMovieReviews,\n};\n\nexport default Api;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Reviews","useState","movieReviews","setMovieReviews","movieId","useParams","useEffect","Api","length","map","review","id","className","css","author","content","nanoid","BASE_URL","KEY","fetchTrendingMovies","setTrendingMovies","axios","params","api_key","resp","data","results","console","error","fetchQueryMovies","query","setQueryMovies","fetchMovieDetails","setMovie","fetchMovieCast","setMovieCast","cast","fetchMovieReviews","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}