{"version":3,"file":"static/js/116.b3be409e.chunk.js","mappings":"6OAAaA,EAAiB,mCAAG,gGAASC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,gBACzCC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NANuB,SAUvBC,MACJ,sCACEC,mBAAmBR,GACnB,kBACFE,GAECO,MAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAMF,EAASG,QAE3B,OAAOH,EAASI,MACjB,IACAL,MAAK,SAAAM,GACJd,EAAgBc,EAAKC,QACtB,IACAC,OAAM,SAAAC,GACLC,QAAQC,MAAMF,EACf,IA3B0B,2CAAH,sD,SCC9B,GAAiB,E,SCKF,SAASG,IACtB,OAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBtB,EAArB,KACQD,GAAYwB,EAAAA,EAAAA,MAAZxB,QAMR,OAJAyB,EAAAA,EAAAA,YAAU,WACR1B,EAAkB,CAAEC,QAAAA,EAASC,gBAAAA,GAC9B,GAAE,CAACD,KAGF,8BAC2B,IAAxBuB,EAAaG,QACZ,wBACGH,EAAaI,KAAI,SAAAC,GAChB,OACE,gBAAmBC,GAAID,EAAOC,GAAIC,UAAWC,EAAAA,KAA7C,WACE,wBACE,yBAAG,WAASH,EAAOI,aAErB,uBAAIJ,EAAOK,aAJJC,EAAAA,EAAAA,MAOZ,OAGH,uBAAG,+CAIV,C,sBClCD,SAASC,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOxB,GAEP,YADAkB,EAAOlB,EAET,CAEIuB,EAAKE,KACPR,EAAQO,GAERE,QAAQT,QAAQO,GAAOnC,KAAK8B,EAAOC,EAEvC,CAEe,SAASO,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIN,SAAQ,SAAUT,EAASC,GACpC,IAAIF,EAAMY,EAAGK,MAAMJ,EAAME,GAEzB,SAASZ,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOtB,GACdiB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAAStB,EACnE,CAEAqB,OAAMe,EACR,GACF,CACF,C,sFCjCO,IAkBIpB,EAAS,eAACqB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAC9B,EAAI+B,GAWvD,OARE/B,IAFF+B,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["services/fetchMovieReviews.js","components/Reviews/Reviews.module.css","components/Reviews/Reviews.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["export const fetchMovieReviews = async ({ movieId, setMovieReviews }) => {\n    const options = {\n      method: 'GET',\n      headers: {\n        accept: 'application/json',\n        Authorization:\n          'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI4Mzk2OTczODNhODEzMDA1YmUxNTBlN2Q4ZGU0ZDMxOSIsInN1YiI6IjY0OTE5ZGYxYzJmZjNkMDBlMmUyMWJmYyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.IbO3a4f3FNpftElFUbgd3_z8DfrptFKWxvdZo4ijCfs',\n      },\n    };\n  \n    await fetch(\n      'https://api.themoviedb.org/3/movie/' +\n        encodeURIComponent(movieId) +\n        '/reviews?page=1',\n      options\n    )\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(response.status);\n        }\n        return response.json();\n      })\n      .then(data => {\n        setMovieReviews(data.results);\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  };\n  ","// extracted by mini-css-extract-plugin\nexport default {};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from 'services/fetchMovieReviews';\nimport { nanoid } from 'nanoid';\nimport css from './Reviews.module.css';\n\nexport default function Reviews() {\n  const [movieReviews, setMovieReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetchMovieReviews({ movieId, setMovieReviews });\n  }, [movieId]);\n\n  return (\n    <>\n      {movieReviews.length !== 0 ? (\n        <ul>\n          {movieReviews.map(review => {\n            return (\n              <li key={nanoid()} id={review.id} className={css.item}>\n                <p>\n                  <b>Author: {review.author}</b>\n                </p>\n                <p>{review.content}</p>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p>We don`t have any reviews for this movie.</p>\n      )}\n    </>\n  );\n}\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["fetchMovieReviews","movieId","setMovieReviews","options","method","headers","accept","Authorization","fetch","encodeURIComponent","then","response","ok","Error","status","json","data","results","catch","err","console","error","Reviews","useState","movieReviews","useParams","useEffect","length","map","review","id","className","css","author","content","nanoid","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","undefined","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}