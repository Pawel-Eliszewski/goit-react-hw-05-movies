{"version":3,"file":"static/js/581.ec520344.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/MovieList/MovieList.module.css?6db5","components/MovieList/MovieList.jsx","services/fetchQueryMovies.js","webpack://react-homework-template/./src/pages/Movies/Movies.module.css?82ee","pages/Movies/Movies.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"MovieList_form__LHsxO\",\"list\":\"MovieList_list__yjDCC\"};","import { Link } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\nimport css from './MovieList.module.css';\n\nexport const MovieList = ({ movies, fromPage }) => {\n  return (\n    <ul className={css.list}>\n      {movies.map(movie => {\n        return (\n          <li key={nanoid()} id={movie.id} className={css.item}>\n            <Link to={`/movies/${movie.id}`} state={{ from: fromPage }}>\n              {movie.title || movie.name}\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n      name: PropTypes.string,\n    })\n  ).isRequired,\n  fromPage: PropTypes.string.isRequired,\n};\n","export const fetchQueryMovies = async ({ query, setQueryMovies }) => {\n  const options = {\n    method: 'GET',\n    headers: {\n      accept: 'application/json',\n      Authorization:\n        'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI4Mzk2OTczODNhODEzMDA1YmUxNTBlN2Q4ZGU0ZDMxOSIsInN1YiI6IjY0OTE5ZGYxYzJmZjNkMDBlMmUyMWJmYyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.IbO3a4f3FNpftElFUbgd3_z8DfrptFKWxvdZo4ijCfs',\n    },\n  };\n\n  await fetch(\n    'https://api.themoviedb.org/3/search/movie?query=' +\n      encodeURIComponent(query.trim()) +\n      '&page=1',\n    options\n  )\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(response.status);\n      }\n      return response.json();\n    })\n    .then(data => {\n      setQueryMovies(data.results);\n    })\n    .catch(err => {\n      console.error(err);\n    });\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Movies_form__4ow+Z\"};","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport { fetchQueryMovies } from 'services/fetchQueryMovies';\nimport { Outlet } from 'react-router-dom';\nimport { MovieList } from 'components/MovieList/MovieList';\nimport css from './Movies.module.css';\n\nexport default function Movies() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [queryMovies, setQueryMovies] = useState([]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    setSearchParams({ query: form.elements.query.value });\n    form.reset();\n  };\n\n  useEffect(() => {\n    const query = searchParams.toString().slice(6);\n    fetchQueryMovies({ query, setQueryMovies });\n  }, [searchParams]);\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit} className={css.form}>\n        <input\n          type=\"text\"\n          name=\"query\"\n          id={nanoid()}\n          autoComplete=\"off\"\n          placeholder=\"Movie title\"\n          required\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      <Outlet />\n      {queryMovies.length > 0 ? (\n        <MovieList movies={queryMovies} fromPage=\"movies\" />\n      ) : null}\n    </div>\n  );\n}\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["MovieList","movies","fromPage","className","css","map","movie","id","to","state","from","title","name","nanoid","fetchQueryMovies","query","setQueryMovies","options","method","headers","accept","Authorization","fetch","encodeURIComponent","trim","then","response","ok","Error","status","json","data","results","catch","err","console","error","Movies","useSearchParams","searchParams","setSearchParams","useState","queryMovies","useEffect","toString","slice","onSubmit","e","preventDefault","form","currentTarget","elements","value","reset","type","autoComplete","placeholder","required","length","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","undefined","size","crypto","getRandomValues","Uint8Array","reduce","byte","toUpperCase"],"sourceRoot":""}