{"version":3,"file":"static/js/930.658e8511.chunk.js","mappings":"6OAAaA,EAAc,mCAAG,gGAASC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,aACxCC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NANsB,SAUtBC,MACJ,sCACEC,mBAAmBR,GACnB,WACFE,GAECO,MAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAMF,EAASG,QAE3B,OAAOH,EAASI,MACjB,IACAL,MAAK,SAAAM,GACJd,EAAac,EAAKC,KACnB,IACAC,OAAM,SAAAC,GACLC,QAAQC,MAAMF,EACf,IA3ByB,2CAAH,sD,SCC3B,GAAiB,E,SCKF,SAASG,IACtB,OAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBtB,EAAlB,KACQD,GAAYwB,EAAAA,EAAAA,MAAZxB,QAMR,OAJAyB,EAAAA,EAAAA,YAAU,WACR1B,EAAe,CAAEC,QAAAA,EAASC,aAAAA,GAC3B,GAAE,CAACD,KAGF,8BACwB,IAArBuB,EAAUG,QACT,wBACGH,EAAUI,KAAI,SAAAC,GACb,OACE,gBAAmBC,GAAID,EAAMC,GAAIC,UAAWC,EAAAA,KAA5C,UACGH,EAAMI,cACL,gBACEC,IAAG,8DAAyDL,EAAMI,cAClEE,MAAM,MACNC,OAAO,MACPC,IAAKR,EAAMS,QAGb,gBACEJ,IAAK,yBACLC,MAAM,MACNC,OAAO,MACPC,IAAKR,EAAMS,QAGf,uBAAIT,EAAMS,QACV,yBAAG,cAAYT,EAAMU,gBAjBdC,EAAAA,EAAAA,MAoBZ,OAGH,uBAAG,4CAIV,C,sBC/CD,SAASC,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAO7B,GAEP,YADAuB,EAAOvB,EAET,CAEI4B,EAAKE,KACPR,EAAQO,GAERE,QAAQT,QAAQO,GAAOxC,KAAKmC,EAAOC,EAEvC,CAEe,SAASO,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIN,SAAQ,SAAUT,EAASC,GACpC,IAAIF,EAAMY,EAAGK,MAAMJ,EAAME,GAEzB,SAASZ,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAO3B,GACdsB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAAS3B,EACnE,CAEA0B,OAAMe,EACR,GACF,CACF,C,sFCjCO,IAkBIpB,EAAS,eAACqB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACnC,EAAIoC,GAWvD,OAREpC,IAFFoC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["services/fetchMovieCast.js","components/Cast/Cast.module.css","components/Cast/Cast.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["export const fetchMovieCast = async ({ movieId, setMovieCast }) => {\n  const options = {\n    method: 'GET',\n    headers: {\n      accept: 'application/json',\n      Authorization:\n        'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI4Mzk2OTczODNhODEzMDA1YmUxNTBlN2Q4ZGU0ZDMxOSIsInN1YiI6IjY0OTE5ZGYxYzJmZjNkMDBlMmUyMWJmYyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.IbO3a4f3FNpftElFUbgd3_z8DfrptFKWxvdZo4ijCfs',\n    },\n  };\n\n  await fetch(\n    'https://api.themoviedb.org/3/movie/' +\n      encodeURIComponent(movieId) +\n      '/credits',\n    options\n  )\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(response.status);\n      }\n      return response.json();\n    })\n    .then(data => {\n      setMovieCast(data.cast);\n    })\n    .catch(err => {\n      console.error(err);\n    });\n};\n","// extracted by mini-css-extract-plugin\nexport default {};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from 'services/fetchMovieCast';\nimport { nanoid } from 'nanoid';\nimport css from './Cast.module.css';\n\nexport default function Cast() {\n  const [movieCast, setMovieCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetchMovieCast({ movieId, setMovieCast });\n  }, [movieId]);\n\n  return (\n    <>\n      {movieCast.length !== 0 ? (\n        <ul>\n          {movieCast.map(actor => {\n            return (\n              <li key={nanoid()} id={actor.id} className={css.item}>\n                {actor.profile_path ? (\n                  <img\n                    src={`https://www.themoviedb.org/t/p/w300_and_h450_bestv2/${actor.profile_path}`}\n                    width=\"100\"\n                    height=\"150\"\n                    alt={actor.name}\n                  ></img>\n                ) : (\n                  <img\n                    src={'./actorsMissingImg.png'}\n                    width=\"100\"\n                    height=\"150\"\n                    alt={actor.name}\n                  ></img>\n                )}\n                <p>{actor.name}</p>\n                <p>Character: {actor.character}</p>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p>We don`t have any cast for this movie.</p>\n      )}\n    </>\n  );\n}\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["fetchMovieCast","movieId","setMovieCast","options","method","headers","accept","Authorization","fetch","encodeURIComponent","then","response","ok","Error","status","json","data","cast","catch","err","console","error","Cast","useState","movieCast","useParams","useEffect","length","map","actor","id","className","css","profile_path","src","width","height","alt","name","character","nanoid","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","undefined","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}